services:

  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
      
  app:
    image: ghcr.io/ipassternak/red:${COMMIT_SHA:-latest}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.web.loadbalancer.server.port=8080"
      - "traefik.http.routers.web.rule=Host(`${HOST}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.routers.web.middlewares=ratelimit"
      - "traefik.http.middlewares.ratelimit.rateLimit.average=5"
      - "traefik.http.middlewares.ratelimit.rateLimit.burst=10"
    environment:
      - PORT=8080
    configs:
      - source: app-config
        target: /app/config.json
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

volumes:
  letsencrypt:

configs:
  app-config:
    external: true
    name: ${STACK}_app-config